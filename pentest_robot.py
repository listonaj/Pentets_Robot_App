#!/usr/bin/python3
from ip_address import ip_network
import subprocess

class UTILITIES:
    def __init__(self):
        """Class constructor
        """
    def separator_line(self): return "###################################"
    
    def execute_command(self,cmd):
        """This function will execute a terminal window command"""
        # declare the command output variable
        cmd_output = ""
        
        try:
            cmd_output = subprocess.check_output(cmd,self=True, stderr=subprocess.STDOUT)
            cmd_output = cmd_output.decode("utf-8")
            cmd_output += "\n%s\n" % self.separator_line()
        except Exception as e:
            print(str(e))
            print("Error - cannot execute the cmd: %s" % cmd)
        finally:
            return cmd_output
            
class HostScan:
    def __init__(self, host_ip):
        """Class constructor.
        """
        self.host_ip = host_ip
        self.util=UTILITIES()
        
    def is_host_live(self):
        """Check if a host is up and running on the network"""
        nmap_cmd = "nmap -sn %s" % self.host_ip
        nmap_output = self.util.execute_command(nmap_cmd)
        if ("1 host up" in nmap_output):
            print("[+] %s is up" % self.host_ip)
            return True
        else:
            return False
        
def validate_input(cidr_input):
    """
    Validate user input -IP address CIDR format
    """
    hosts = []
    try:
        hosts = list(ip_network(cidr_input).hosts())
    except:
        print("Invalid input: A Valid CIDR IP range example: 192.168.0.0/24")
        return None
    return hosts

if __name__ == '__main__':
    """
    This is where the application is first called
    """
    # print Banner
    print("Welcome to the pentest Robot app")
    print("################################")
    print("Enter a single IP or Range in CIDR format (e.g. 192.168.0.0/24)")
    
    # user input
    cidr_input = input ("IP/CIDR>")
    print(cidr_input)
    hosts = validate_input(cidr_input)
    
    #if the CIDR value is valid 
    if (hosts != None):
        print("\n[i] Checking for Live Hosts...\n")
        LIVE_HOSTS = []
        for host in hosts:
            scanner = HostScan(host)
            if (scanner.is_live_host()):
                LIVE_HOSTS.append(host)
    print (LIVE_HOSTS)

